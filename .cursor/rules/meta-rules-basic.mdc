---
description: 掟ドキュメントの基本ルール
globs: ["**/*.md", "**/*.mdc"]
alwaysApply: true
---

# 掟ドキュメントの基本ルール

## 概要

この掟ドキュメントは、AIコードエージェントに与えるルールを定義します。
全てのドキュメントは、以下のルールに従って作成・更新されなければなりません。

## メタデータルール

### フロントマター

各Markdownファイルには以下のフロントマターを**必ず**含める：

```yaml
---
description: ドキュメントの説明（必須）
ruleId: ルールID (必須)
tags: [関連タグ]（必須:1個以上）
aliases: [別名]（任意）
globs: [パターン]（必須）
```

#### ルールID (ruleId) の付与方法

[ルールIDの定義](meta-rule-rule-id.mdc)を参照。

### タグ規則

- プロジェクト共通タグ
  - `development`: 開発関連
  - `operation`: 運用関連
  - `management`: プロジェクト管理関連
- 必須タグ (`tags:`) には、関連分野やドキュメント種別を最低1個以上指定する。

## 文書形式ルール

`markdownlint`がパスするように記述してください。詳しいリントルールは`.markdownlint.json`を確認してください。

```shell
npm run lint:md
```

## 更新ルール

### Gitコミットルール

1. **メッセージ形式**

[Conventional Commits](mdc:https:/www.conventionalcommits.org/ja/v1.0.0)に従ってください。

1. **コミット前の確認**
   - `npm run fix:md` を実行して Markdown の形式を整える
   - `npm run lint:md` で lintエラーがないことを確認
   - `npm run check:md:links` でリンクの有効性を確認
   - `npm run check:md:structure` でドキュメント構造を確認
1. **コミット単位**
   - 論理的なまとまりごとに行う
   - 複数ファイルの整合性を維持
   - リンク切れを発生させない

### レビュールール

1. **必須確認項目**
   - フロントマターの完全性（`description`, `ruleId`, `tags`, `aliases`, `globs` が揃っているか）
   - 文書形式の正確性
   - リンクの有効性
   - 用語の一貫性
2. **レビュー記録**
   - Github Pull Requestで管理するため、このドキュメントでは管理しない